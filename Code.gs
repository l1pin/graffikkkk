// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Code.gs –¥–ª—è Google Apps Script - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° TIKTOK –ú–ï–¢–†–ò–ö–ê–ú–ò

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ SQL –∑–∞–ø–∏—Ç–æ–º –∏–∑ –ë–î - –í–û–ó–í–†–ê–©–ê–ï–¢ –î–ê–ù–ù–´–ï –ù–ê–ü–†–Ø–ú–£–Æ
 * @param {string} strSQL - SQL –∑–∞–ø–∏—Ç
 * @return {Array|Object} - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π
 */
function getDataBySql(strSQL = "SELECT * FROM `ads_collection` WHERE `source` = 'tiktok'") {
  try {
    // === 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ POST –∑–∞–ø–∏—Ç –¥–æ PHP –±–µ–∫–µ–Ω–¥—É ===
    const url = 'https://api.trll-notif.com.ua/adsreportcollector/core.php';

    const options = {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify({ sql: strSQL }),
      muteHttpExceptions: true,
    };

    console.log('üîç Sending request to database API...');
    const response = UrlFetchApp.fetch(url, options);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
    if (response.getResponseCode() !== 200) {
      return { error: `HTTP ${response.getResponseCode()}: –°–µ—Ä–≤–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω` };
    }
    
    const responseText = response.getContentText();
    if (!responseText || responseText.trim() === '') {
      return { error: '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' };
    }
    
    let json;
    try {
      json = JSON.parse(responseText);
    } catch (parseError) {
      return { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ' + parseError.message };
    }

    // === 2. –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É ===
    if (json.error) {
      return { error: json.error };
    }

    if (!json || !Array.isArray(json) || json.length === 0) {
      return { error: 'empty data' };
    }

    // === 3. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –Ω–∞–ø—Ä—è–º—É (–ë–ï–ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∏—Å—Ç—ñ–≤) ===
    const data = json;
    
    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç, —è–∫–∏–π –æ—á—ñ–∫—É—î —Ñ—É–Ω–∫—Ü—ñ—è parseDbResults
    if (typeof data[0] === 'object' && !Array.isArray(data[0])) {
      // –Ø–∫—â–æ —Ü–µ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç [headers, ...rows]
      const headers = Object.keys(data[0]);
      const rows = data.map(row => headers.map(h => row[h]));
      console.log('‚úÖ Successfully processed', rows.length, 'data rows');
      return [headers, ...rows];
    } else {
      // –Ø–∫—â–æ –≤–∂–µ –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤
      console.log('‚úÖ Successfully received', data.length, 'data rows');
      return data;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getDataBySql:', error);
    return { error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message };
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
 */
function parseCampaignName(fullName) {
  const result = {
    article: '',
    productName: '',
    buyer: '',
    source: '',
    account: ''
  };
  
  if (!fullName || typeof fullName !== 'string') {
    return result;
  }
  
  try {
    // –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ –Ω–∞—á–∞–ª–µ (–±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
    const articleMatch = fullName.match(/^([A-Z]+\d+)/);
    if (articleMatch) {
      result.article = articleMatch[1];
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ " | "
    const parts = fullName.split(' | ');
    
    if (parts.length >= 2) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–∞–π–µ—Ä–∞ (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è)
      result.buyer = parts[1].trim();
      
      if (parts.length >= 3) {
        // –¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ + –∞–∫–∫–∞—É–Ω—Ç
        const sourceAccountPart = parts[2].trim();
        
        // –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç (–æ–±—ã—á–Ω–æ VL + —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
        const accountMatch = sourceAccountPart.match(/\b(VL\d+|[A-Z]+\d+)\b/);
        if (accountMatch) {
          result.account = accountMatch[1];
          // –ò—Å—Ç–æ—á–Ω–∏–∫ - —ç—Ç–æ —á–∞—Å—Ç—å –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
          result.source = sourceAccountPart.replace(accountMatch[0], '').trim();
        } else {
          result.source = sourceAccountPart;
        }
      }
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–µ–∂–¥—É –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –ø–µ—Ä–≤—ã–º " | ")
    if (parts.length >= 1) {
      const firstPart = parts[0];
      const productMatch = firstPart.replace(result.article, '').trim();
      if (productMatch.startsWith(' ')) {
        result.productName = productMatch.substring(1).replace(/\s*-\s*$/, '').trim();
      }
    }
    
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏:', fullName, e);
  }
  
  return result;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
    .setTitle('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ TikTok Ads');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –° TIKTOK –ú–ï–¢–†–ò–ö–ê–ú–ò
 */
function buildChartForArticle(article, periodStart, periodEnd) {
  try {
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
    function formatValueByRow(value, rowIndex) {
      // –î–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–µ–∫–ª–∞–º—ã (–∏–Ω–¥–µ–∫—Å 23), URL (24) –∏ –±—é–¥–∂–µ—Ç–∞ (25) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
      if (rowIndex === 23 || rowIndex === 24 || rowIndex === 25) {
        return value ? String(value).trim() : '';
      }
      
      const strVal = String(value || '').replace(',', '.');
      const num = parseFloat(strVal);
      if (isNaN(num)) return value ? String(value) : '';
      
      switch (rowIndex) {
        case 17: case 18: case 19: case 21: case 22:
          return num.toFixed(2).replace('.', ',');
        case 20: case 26:
          return String(Math.floor(num));
        default:
          return num.toFixed(2).replace('.', ',');
      }
    }

    function sumMultilineValues(valuesArray) {
      if (!Array.isArray(valuesArray)) return 0;
      
      let totalSum = 0;
      valuesArray.forEach(val => {
        if (val !== undefined && val !== null && val !== '') {
          const lines = String(val).split('\n');
          lines.forEach(line => {
            const trimmedLine = line.trim();
            if (trimmedLine !== '') {
              const num = Number(trimmedLine) || 0;
              totalSum += num;
            }
          });
        }
      });
      
      return totalSum;
    }

    function processDayValues(arr, rowIndex) {
      if (!Array.isArray(arr)) {
        return '';
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
      let valuesToConvert;
      if (rowIndex === 24 || rowIndex === 25) {
        // URL –∏ –ë—é–¥–∂–µ—Ç - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        valuesToConvert = Array.from(new Set(arr.filter(v => v !== undefined && v !== null && v !== '')));
      } else if (rowIndex === 23) {
        // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
        valuesToConvert = Array.from(new Set(arr.filter(v => v !== undefined && v !== null && v !== '' && String(v).trim() !== '')));
      } else {
        // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
        valuesToConvert = arr.filter(v => v !== undefined && v !== null && v !== '');
      }
      
      return valuesToConvert.map(v => formatValueByRow(v, rowIndex)).join('\n');
    }

    function calculateRating(cpl, ratingThreshold) {
      if (cpl === 0 || isNaN(cpl) || ratingThreshold === 0) return "";
      
      const percentage = (cpl / ratingThreshold) * 100;
      
      if (percentage <= 35) return "A";
      else if (percentage <= 65) return "B";
      else if (percentage <= 90) return "C";
      else return "D";
    }

    function parseSeason(seasonEmoji) {
      if (!seasonEmoji || seasonEmoji.trim() === '') return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const seasonString = seasonEmoji.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Å–µ—Å–µ–∑–æ–Ω (–≤—Å–µ 4 —ç–º–æ–¥–∑–∏)
      if (seasonString.includes('‚òÄÔ∏è') && seasonString.includes('üçÅ') && 
          seasonString.includes('‚ùÑÔ∏è') && seasonString.includes('üå±')) {
        return '–í—Å–µ—Å–µ–∑–æ–Ω';
      }
      
      const seasons = [];
      if (seasonString.includes('‚òÄÔ∏è')) seasons.push('–õ–µ—Ç–æ');
      if (seasonString.includes('üçÅ')) seasons.push('–û—Å–µ–Ω—å');
      if (seasonString.includes('‚ùÑÔ∏è')) seasons.push('–ó–∏–º–∞');
      if (seasonString.includes('üå±')) seasons.push('–í–µ—Å–Ω–∞');
      
      return seasons.length > 0 ? seasons.join(', ') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
    function getDataFromDatabase(sqlQuery) {
      try {
        console.log('Executing SQL query...');
        const result = getDataBySql(sqlQuery);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –æ—Ç API
        if (result && typeof result === 'object' && result.error) {
          if (result.error === 'empty data') {
            throw new Error('EMPTY_DATA');
          }
          throw new Error(`üö® –û—à–∏–±–∫–∞ API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${result.error}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
        if (!Array.isArray(result)) {
          throw new Error('üîß –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n\n–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.');
        }
        
        if (result.length === 0) {
          throw new Error('EMPTY_DATA');
        }
        
        console.log('‚úÖ Data received successfully:', result.length, 'rows');
        return result;
        
      } catch (error) {
        console.error('‚ùå Error getting data from database:', error);
        throw error;
      }
    }

    function parseDbResults(data) {
      if (!data || data.length < 2) return [];
      
      const headers = data[0];
      const rows = data.slice(1);
      
      return rows.map(row => {
        const obj = {};
        headers.forEach((header, index) => {
          obj[header] = row[index];
        });
        return obj;
      });
    }

    if (!article || article.trim() === '') {
      throw new Error('–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    console.log('Starting analysis for article:', article);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥
    let periodChosen = false, periodStartDate, periodEndDate;
    if (periodStart && periodEnd) {
      periodChosen = true;
      periodStartDate = new Date(periodStart);
      periodEndDate = new Date(periodEnd);
      console.log('Period selected:', periodStart, 'to', periodEnd);
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ö–ê–ü–´ 3.0 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    let maxCPLThreshold = 3.5;
    let status = '–ê–∫—Ç–∏–≤–Ω—ã–π';
    let stock = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    let stockDays = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    let season = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    let category = '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    let efficiencyZoneFormatted = {
      value: '--,--%',
      backgroundColor: '#f3f3f3',
      fontColor: '#666666'
    };
    let zoneABFormatted = '-';
    let zoneACFormatted = '-';
    let zoneADFormatted = '-';
    let zoneAEFormatted = '-';

    try {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const sheetKapy = ss.getSheetByName('–ö–ê–ü–´ 3.0');
      
      if (sheetKapy) {
        console.log('Reading data from –ö–ê–ü–´ 3.0 sheet...');
        const kapyData = sheetKapy.getDataRange().getValues();
        let articleRow = null;
        
        for (let i = 0; i < kapyData.length; i++) {
          const cellValue = String(kapyData[i][1] || '').trim();
          if (cellValue === article.trim()) {
            articleRow = i + 1;
            break;
          }
        }

        if (articleRow) {
          console.log('Found article in –ö–ê–ü–´ 3.0 at row:', articleRow);
          const rawAB = sheetKapy.getRange(articleRow, 28).getValue();
          const rawAF = sheetKapy.getRange(articleRow, 32).getValue();
          maxCPLThreshold = (rawAB !== '' && !isNaN(rawAB)) ? Number(rawAB) : 
                           (rawAF !== '' && !isNaN(rawAF)) ? Number(rawAF) : 3.5;

          status = String(sheetKapy.getRange(articleRow, 4).getValue() || '–ê–∫—Ç–∏–≤–Ω—ã–π').trim();
          const stockValue = sheetKapy.getRange(articleRow, 34).getValue();
          const stockDaysValue = sheetKapy.getRange(articleRow, 33).getValue();
          const seasonEmoji = String(sheetKapy.getRange(articleRow, 39).getValue() || '').trim();
          const categoryValue = String(sheetKapy.getRange(articleRow, 44).getValue() || '').trim();
          
          stock = stockValue !== null && stockValue !== undefined && stockValue !== '' ? 
            String(stockValue) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
          stockDays = stockDaysValue !== null && stockDaysValue !== undefined && stockDaysValue !== '' ? 
            String(stockDaysValue) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
          season = parseSeason(seasonEmoji);
          category = categoryValue || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

          // –ó–æ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          const efficiencyZoneValue = sheetKapy.getRange(articleRow, 27).getValue();
          const zoneAB = sheetKapy.getRange(articleRow, 28).getValue();
          const zoneAC = sheetKapy.getRange(articleRow, 29).getValue();
          const zoneAD = sheetKapy.getRange(articleRow, 30).getValue();
          const zoneAE = sheetKapy.getRange(articleRow, 31).getValue();
          
          // –ß–ò–¢–ê–ï–ú –¶–í–ï–¢–ê –ò–ó –Ø–ß–ï–ô–ö–ò AA (–∫–æ–ª–æ–Ω–∫–∞ 27) - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò!
          const efficiencyZoneCell = sheetKapy.getRange(articleRow, 27);
          let zoneBackgroundColor = null;
          let zoneFontColor = null;
          
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —è—á–µ–π–∫–∏
            zoneBackgroundColor = efficiencyZoneCell.getBackground();
            // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏  
            zoneFontColor = efficiencyZoneCell.getFontColor();
            console.log('Zone colors from sheet - Background:', zoneBackgroundColor, 'Font:', zoneFontColor);
          } catch (colorError) {
            console.log('Error reading cell colors:', colorError);
            zoneBackgroundColor = '#f3f3f3';
            zoneFontColor = '#666666';
          }
          
          efficiencyZoneFormatted = (efficiencyZoneValue !== null && efficiencyZoneValue !== undefined && efficiencyZoneValue !== '') ? 
            (Number(efficiencyZoneValue) * 100).toFixed(2).replace('.', ',') + '%' : '--,--%';
          
          zoneABFormatted = (zoneAB !== null && zoneAB !== undefined && zoneAB !== '') ? 
            Number(zoneAB).toFixed(2).replace('.', ',') : '-';
          zoneACFormatted = (zoneAC !== null && zoneAC !== undefined && zoneAC !== '') ? 
            Number(zoneAC).toFixed(2).replace('.', ',') : '-';  
          zoneADFormatted = (zoneAD !== null && zoneAD !== undefined && zoneAD !== '') ? 
            Number(zoneAD).toFixed(2).replace('.', ',') : '-';
          zoneAEFormatted = (zoneAE !== null && zoneAE !== undefined && zoneAE !== '') ? 
            Number(zoneAE).toFixed(2).replace('.', ',') : '-';
            
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
          efficiencyZoneFormatted = {
            value: (efficiencyZoneValue !== null && efficiencyZoneValue !== undefined && efficiencyZoneValue !== '') ? 
              (Number(efficiencyZoneValue) * 100).toFixed(2).replace('.', ',') + '%' : '--,--%',
            backgroundColor: zoneBackgroundColor || '#f3f3f3',
            fontColor: zoneFontColor || '#666666'
          };
        } else {
          console.log('Article not found in –ö–ê–ü–´ 3.0');
        }
      } else {
        console.log('–ö–ê–ü–´ 3.0 sheet not found');
      }
    } catch (e) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ö–ê–ü–´ 3.0:', e);
    }

    const displayMaxCPL = maxCPLThreshold;
    const displayCPL_ROI_minus5 = maxCPLThreshold;

    // –ü–û–°–¢–†–û–ï–ù–ò–ï –ï–î–ò–ù–û–ì–û SQL –ó–ê–ü–†–û–°–ê
    let dateFilter = '';
    if (periodChosen) {
      const startDateStr = Utilities.formatDate(periodStartDate, 'Europe/Kiev', 'yyyy-MM-dd');
      const endDateStr = Utilities.formatDate(periodEndDate, 'Europe/Kiev', 'yyyy-MM-dd');
      dateFilter = ` AND \`adv_date\` >= '${startDateStr}' AND \`adv_date\` <= '${endDateStr}'`;
    }

    // –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const combinedSql = `
      SELECT 
        campaign_name,
        campaign_name_tracker,
        adv_group_name,
        adv_name,
        adv_date,
        adv_group_id,
        campaign_id,
        target_url,
        adv_id,
        cpc,
        cpm,
        clicks_on_link,
        ctr,
        frequency,
        average_time_on_video,
        valid_cpa,
        valid,
        cost,
        valid_cr,
        clicks_on_link_tracker,
        viewed_tracker,
        cpc_tracker,
        fraud,
        fraud_cpa
      FROM \`ads_collection\`
      WHERE \`source\` = 'tiktok' 
        AND (\`campaign_name\` LIKE '${article}%' OR \`campaign_name_tracker\` LIKE '${article}%')${dateFilter}
      ORDER BY adv_date
    `;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î - –û–î–ù–ò–ú –ó–ê–ü–†–û–°–û–ú
    console.log('Fetching all data with combined query...');
    let allData;
    
    try {
      allData = getDataFromDatabase(combinedSql);
      if (!allData || allData.length === 0) {
        throw new Error(`üìä –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n\n–ê—Ä—Ç–∏–∫—É–ª "${article}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞\n‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É\n‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥`);
      }
    } catch (error) {
      if (error.message.includes('üìä')) {
        throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
      }
      throw new Error(`üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`);
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    console.log('Parsing database results...');
    const allRows = parseDbResults(allData);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ TikTok –∏ —Ç—Ä–µ–∫–µ—Ä
    const tiktokRows = allRows.filter(row => row.campaign_name && row.campaign_name.includes(article));
    const trackerRows = allRows.filter(row => row.campaign_name_tracker && row.campaign_name_tracker.includes(article));

    console.log('TikTok rows:', tiktokRows.length);
    console.log('Tracker rows:', trackerRows.length);

    if (tiktokRows.length === 0 && trackerRows.length === 0) {
      throw new Error(`üìä –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n\n–ü–æ –∞—Ä—Ç–∏–∫—É–ª—É "${article}" –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å\n‚Ä¢ –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞—Ç`);
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('Processing data...');
    let minDate = null, maxDate = null;
    const resultMap = {};
    const resultMapByGroupId = {};
    const resultMapByGroup = {};
    const resultMapByBuyer = {};
    const resultMapByAccount = {};
    // –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –ë–∞–π–µ—Ä -> –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    const resultMapByBuyerGroup = {};
    const fbDataMap = {};
    const fbDataMapByGroupId = {};
    const fbDataMapByGroup = {};
    const fbDataMapByBuyer = {};
    const fbDataMapByAccount = {};
    // –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –ë–∞–π–µ—Ä -> –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–¥–ª—è TikTok –¥–∞–Ω–Ω—ã—Ö)
    const fbDataMapByBuyerGroup = {};
    const groupsByDate = {};
    const buyersByDate = {};
    const accountsByDate = {};
    const globalGroups = new Set();
    const globalBuyers = new Set();
    const globalAccounts = new Set();
    const groupIdToNameMap = {};
    // –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ –±–∞–π–µ—Ä–∞–º
    const buyerGroupsMap = {}; // { buyer: Set(groups) }
    let totalLeadsAll = 0, totalClicksAll = 0;
    const globalVideos = new Set(), globalSites = new Set();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–∞
    trackerRows.forEach(row => {
      const fullName = String(row.campaign_name_tracker || '').trim();
      const dateObj = new Date(row.adv_date);
      if (isNaN(dateObj.getTime())) return;
      
      const campaignInfo = parseCampaignName(fullName);
      if (campaignInfo.article !== article) return;
      
      const dateStr = Utilities.formatDate(dateObj, 'Europe/Kiev', 'yyyy-MM-dd');
      const groupId = String(row.adv_group_id || '').trim();
      const leads = Number(row.valid) || 0;
      const spend = Number(row.cost) || 0;
      const siteClicks = Number(row.clicks_on_link_tracker) || 0;

      if (!resultMap[dateStr]) resultMap[dateStr] = { leads: 0, spend: 0 };
      resultMap[dateStr].leads += leads;
      resultMap[dateStr].spend += spend;

      if (!resultMapByGroupId[groupId]) resultMapByGroupId[groupId] = {};
      if (!resultMapByGroupId[groupId][dateStr]) resultMapByGroupId[groupId][dateStr] = { leads: 0, spend: 0 };
      resultMapByGroupId[groupId][dateStr].leads += leads;
      resultMapByGroupId[groupId][dateStr].spend += spend;

      // –ü–æ –±–∞–π–µ—Ä–∞–º
      if (campaignInfo.buyer) {
        if (!resultMapByBuyer[campaignInfo.buyer]) resultMapByBuyer[campaignInfo.buyer] = {};
        if (!resultMapByBuyer[campaignInfo.buyer][dateStr]) resultMapByBuyer[campaignInfo.buyer][dateStr] = { leads: 0, spend: 0 };
        resultMapByBuyer[campaignInfo.buyer][dateStr].leads += leads;
        resultMapByBuyer[campaignInfo.buyer][dateStr].spend += spend;
        globalBuyers.add(campaignInfo.buyer);
        
        if (!buyersByDate[dateStr]) buyersByDate[dateStr] = [];
        buyersByDate[dateStr].push(campaignInfo.buyer);
        
        // –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –ë–∞–π–µ—Ä -> –ì—Ä—É–ø–ø–∞ (–ø–æ ID –≥—Ä—É–ø–ø—ã)
        if (groupId) {
          const buyerGroupKey = `${campaignInfo.buyer}:::${groupId}`;
          if (!resultMapByBuyerGroup[buyerGroupKey]) resultMapByBuyerGroup[buyerGroupKey] = {};
          if (!resultMapByBuyerGroup[buyerGroupKey][dateStr]) resultMapByBuyerGroup[buyerGroupKey][dateStr] = { leads: 0, spend: 0 };
          resultMapByBuyerGroup[buyerGroupKey][dateStr].leads += leads;
          resultMapByBuyerGroup[buyerGroupKey][dateStr].spend += spend;
          
          // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–π–µ—Ä–∞
          if (!buyerGroupsMap[campaignInfo.buyer]) buyerGroupsMap[campaignInfo.buyer] = new Set();
          buyerGroupsMap[campaignInfo.buyer].add(groupId);
        }
      }

      // –ü–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
      if (campaignInfo.account) {
        if (!resultMapByAccount[campaignInfo.account]) resultMapByAccount[campaignInfo.account] = {};
        if (!resultMapByAccount[campaignInfo.account][dateStr]) resultMapByAccount[campaignInfo.account][dateStr] = { leads: 0, spend: 0 };
        resultMapByAccount[campaignInfo.account][dateStr].leads += leads;
        resultMapByAccount[campaignInfo.account][dateStr].spend += spend;
        globalAccounts.add(campaignInfo.account);
        
        if (!accountsByDate[dateStr]) accountsByDate[dateStr] = [];
        accountsByDate[dateStr].push(campaignInfo.account);
      }

      totalLeadsAll += leads;
      totalClicksAll += siteClicks;

      if (!minDate || dateObj < minDate) minDate = dateObj;
      if (!maxDate || dateObj > maxDate) maxDate = dateObj;
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö TikTok - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –° –ë–ê–ô–ï–†-–ì–†–£–ü–ü–ê –°–¢–†–£–ö–¢–£–†–û–ô
    console.log('Processing TikTok data...');
    tiktokRows.forEach(row => {
      const fullName = String(row.campaign_name || '').trim();
      const groupName = String(row.adv_group_name || '').trim();
      const groupId = String(row.adv_group_id || '').trim();
      const advName = String(row.adv_name || '').trim();
      const dateObj = new Date(row.adv_date);
      if (isNaN(dateObj.getTime())) return;
      
      const campaignInfo = parseCampaignName(fullName);
      if (campaignInfo.article !== article) return;
      
      const dateStr = Utilities.formatDate(dateObj, 'Europe/Kiev', 'yyyy-MM-dd');

      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ ID ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
      if (groupId && groupName) {
        groupIdToNameMap[groupId] = groupName;
        globalGroups.add(groupName);
      }

      // –°–æ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
      if (!groupsByDate[dateStr]) groupsByDate[dateStr] = [];
      groupsByDate[dateStr].push(groupName);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö TikTok –¥–∞–Ω–Ω—ã—Ö
      if (!fbDataMap[dateStr]) {
        fbDataMap[dateStr] = {
          adId: [], freq: [], ctr: [], cpm: [], linkClicks: [],
          cpc: [], avgWatchTime: [], videoName: [], siteUrl: [], budget: []
        };
      }
      
      // TikTok –¥–∞–Ω–Ω—ã–µ
      fbDataMap[dateStr].adId.push(row.adv_id !== undefined && row.adv_id !== null ? String(row.adv_id) : '');
      fbDataMap[dateStr].freq.push(row.frequency !== undefined && row.frequency !== null ? String(row.frequency) : '');
      fbDataMap[dateStr].ctr.push(row.ctr !== undefined && row.ctr !== null ? String(row.ctr) : '');
      fbDataMap[dateStr].cpm.push(row.cpm !== undefined && row.cpm !== null ? String(row.cpm) : '');
      fbDataMap[dateStr].linkClicks.push(row.clicks_on_link !== undefined && row.clicks_on_link !== null ? String(row.clicks_on_link) : '');
      fbDataMap[dateStr].cpc.push(row.cpc !== undefined && row.cpc !== null ? String(row.cpc) : '');
      fbDataMap[dateStr].avgWatchTime.push(row.average_time_on_video !== undefined && row.average_time_on_video !== null ? String(row.average_time_on_video) : '');
      fbDataMap[dateStr].videoName.push(row.adv_name !== undefined && row.adv_name !== null && row.adv_name !== '' ? String(row.adv_name).trim() : '');
      fbDataMap[dateStr].siteUrl.push(row.target_url !== undefined && row.target_url !== null && row.target_url !== '' ? String(row.target_url).trim() : '');
      fbDataMap[dateStr].budget.push('');

      // –ü–æ ID –≥—Ä—É–ø–ø—ã
      if (!fbDataMapByGroupId[groupId]) fbDataMapByGroupId[groupId] = {};
      if (!fbDataMapByGroupId[groupId][dateStr]) {
        fbDataMapByGroupId[groupId][dateStr] = {
          adId: [], freq: [], ctr: [], cpm: [], linkClicks: [],
          cpc: [], avgWatchTime: [], videoName: [], siteUrl: [], budget: []
        };
      }
      fbDataMapByGroupId[groupId][dateStr].adId.push(row.adv_id !== undefined && row.adv_id !== null ? String(row.adv_id) : '');
      fbDataMapByGroupId[groupId][dateStr].freq.push(row.frequency !== undefined && row.frequency !== null ? String(row.frequency) : '');
      fbDataMapByGroupId[groupId][dateStr].ctr.push(row.ctr !== undefined && row.ctr !== null ? String(row.ctr) : '');
      fbDataMapByGroupId[groupId][dateStr].cpm.push(row.cpm !== undefined && row.cpm !== null ? String(row.cpm) : '');
      fbDataMapByGroupId[groupId][dateStr].linkClicks.push(row.clicks_on_link !== undefined && row.clicks_on_link !== null ? String(row.clicks_on_link) : '');
      fbDataMapByGroupId[groupId][dateStr].cpc.push(row.cpc !== undefined && row.cpc !== null ? String(row.cpc) : '');
      fbDataMapByGroupId[groupId][dateStr].avgWatchTime.push(row.average_time_on_video !== undefined && row.average_time_on_video !== null ? String(row.average_time_on_video) : '');
      fbDataMapByGroupId[groupId][dateStr].videoName.push(row.adv_name !== undefined && row.adv_name !== null && row.adv_name !== '' ? String(row.adv_name).trim() : '');
      fbDataMapByGroupId[groupId][dateStr].siteUrl.push(row.target_url !== undefined && row.target_url !== null && row.target_url !== '' ? String(row.target_url).trim() : '');
      fbDataMapByGroupId[groupId][dateStr].budget.push('');

      // –ü–æ –±–∞–π–µ—Ä–∞–º
      if (campaignInfo.buyer) {
        if (!fbDataMapByBuyer[campaignInfo.buyer]) fbDataMapByBuyer[campaignInfo.buyer] = {};
        if (!fbDataMapByBuyer[campaignInfo.buyer][dateStr]) {
          fbDataMapByBuyer[campaignInfo.buyer][dateStr] = {
            adId: [], freq: [], ctr: [], cpm: [], linkClicks: [],
            cpc: [], avgWatchTime: [], videoName: [], siteUrl: [], budget: []
          };
        }
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].adId.push(row.adv_id !== undefined && row.adv_id !== null ? String(row.adv_id) : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].freq.push(row.frequency !== undefined && row.frequency !== null ? String(row.frequency) : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].ctr.push(row.ctr !== undefined && row.ctr !== null ? String(row.ctr) : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].cpm.push(row.cpm !== undefined && row.cpm !== null ? String(row.cpm) : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].linkClicks.push(row.clicks_on_link !== undefined && row.clicks_on_link !== null ? String(row.clicks_on_link) : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].cpc.push(row.cpc !== undefined && row.cpc !== null ? String(row.cpc) : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].avgWatchTime.push(row.average_time_on_video !== undefined && row.average_time_on_video !== null ? String(row.average_time_on_video) : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].videoName.push(row.adv_name !== undefined && row.adv_name !== null && row.adv_name !== '' ? String(row.adv_name).trim() : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].siteUrl.push(row.target_url !== undefined && row.target_url !== null && row.target_url !== '' ? String(row.target_url).trim() : '');
        fbDataMapByBuyer[campaignInfo.buyer][dateStr].budget.push('');
        
        // –ù–û–í–û–ï: –ü–æ –±–∞–π–µ—Ä-–≥—Ä—É–ø–ø–∞–º
        if (groupId) {
          const buyerGroupKey = `${campaignInfo.buyer}:::${groupId}`;
          if (!fbDataMapByBuyerGroup[buyerGroupKey]) fbDataMapByBuyerGroup[buyerGroupKey] = {};
          if (!fbDataMapByBuyerGroup[buyerGroupKey][dateStr]) {
            fbDataMapByBuyerGroup[buyerGroupKey][dateStr] = {
              adId: [], freq: [], ctr: [], cpm: [], linkClicks: [],
              cpc: [], avgWatchTime: [], videoName: [], siteUrl: [], budget: []
            };
          }
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].adId.push(row.adv_id !== undefined && row.adv_id !== null ? String(row.adv_id) : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].freq.push(row.frequency !== undefined && row.frequency !== null ? String(row.frequency) : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].ctr.push(row.ctr !== undefined && row.ctr !== null ? String(row.ctr) : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].cpm.push(row.cpm !== undefined && row.cpm !== null ? String(row.cpm) : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].linkClicks.push(row.clicks_on_link !== undefined && row.clicks_on_link !== null ? String(row.clicks_on_link) : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].cpc.push(row.cpc !== undefined && row.cpc !== null ? String(row.cpc) : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].avgWatchTime.push(row.average_time_on_video !== undefined && row.average_time_on_video !== null ? String(row.average_time_on_video) : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].videoName.push(row.adv_name !== undefined && row.adv_name !== null && row.adv_name !== '' ? String(row.adv_name).trim() : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].siteUrl.push(row.target_url !== undefined && row.target_url !== null && row.target_url !== '' ? String(row.target_url).trim() : '');
          fbDataMapByBuyerGroup[buyerGroupKey][dateStr].budget.push('');
        }
      }

      // –ü–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
      if (campaignInfo.account) {
        if (!fbDataMapByAccount[campaignInfo.account]) fbDataMapByAccount[campaignInfo.account] = {};
        if (!fbDataMapByAccount[campaignInfo.account][dateStr]) {
          fbDataMapByAccount[campaignInfo.account][dateStr] = {
            adId: [], freq: [], ctr: [], cpm: [], linkClicks: [],
            cpc: [], avgWatchTime: [], videoName: [], siteUrl: [], budget: []
          };
        }
        fbDataMapByAccount[campaignInfo.account][dateStr].adId.push(row.adv_id !== undefined && row.adv_id !== null ? String(row.adv_id) : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].freq.push(row.frequency !== undefined && row.frequency !== null ? String(row.frequency) : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].ctr.push(row.ctr !== undefined && row.ctr !== null ? String(row.ctr) : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].cpm.push(row.cpm !== undefined && row.cpm !== null ? String(row.cpm) : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].linkClicks.push(row.clicks_on_link !== undefined && row.clicks_on_link !== null ? String(row.clicks_on_link) : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].cpc.push(row.cpc !== undefined && row.cpc !== null ? String(row.cpc) : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].avgWatchTime.push(row.average_time_on_video !== undefined && row.average_time_on_video !== null ? String(row.average_time_on_video) : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].videoName.push(row.adv_name !== undefined && row.adv_name !== null && row.adv_name !== '' ? String(row.adv_name).trim() : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].siteUrl.push(row.target_url !== undefined && row.target_url !== null && row.target_url !== '' ? String(row.target_url).trim() : '');
        fbDataMapByAccount[campaignInfo.account][dateStr].budget.push('');
      }

      if (row.adv_name && row.adv_name !== undefined && row.adv_name !== null && row.adv_name !== '') {
        globalVideos.add(String(row.adv_name).trim());
      }
      if (row.target_url && row.target_url !== undefined && row.target_url !== null && row.target_url !== '') {
        globalSites.add(String(row.target_url).trim());
      }
    });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º resultMapByGroup –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–∫–∏ ID ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    Object.keys(groupIdToNameMap).forEach(groupId => {
      const groupName = groupIdToNameMap[groupId];
      if (resultMapByGroupId[groupId]) {
        resultMapByGroup[groupName] = resultMapByGroupId[groupId];
      }
    });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º fbDataMapByGroup –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–∫–∏ ID ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    Object.keys(groupIdToNameMap).forEach(groupId => {
      const groupName = groupIdToNameMap[groupId];
      if (fbDataMapByGroupId[groupId]) {
        fbDataMapByGroup[groupName] = fbDataMapByGroupId[groupId];
      }
    });

    if (!minDate) {
      throw new Error(`üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n–ü–æ –∞—Ä—Ç–∏–∫—É–ª—É "${article}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª –Ω–∞–ø–∏—Å–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–∏ –∏–º–µ–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã\n‚Ä¢ –í—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥`);
    }

    if (periodChosen) {
      minDate = periodStartDate;
      maxDate = periodEndDate;
    }

    // –ú–∞—Å—Å–∏–≤ –¥–∞—Ç - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
    let firstActiveDate = null, lastActiveDate = null;
    
    let curDate = new Date(minDate);
    while (curDate <= maxDate) {
      const dateKey = Utilities.formatDate(curDate, 'Europe/Kiev', 'yyyy-MM-dd');
      const rec = resultMap[dateKey] || { leads: 0, spend: 0 };
      
      if (rec.spend > 0) {
        if (!firstActiveDate) firstActiveDate = new Date(curDate);
        lastActiveDate = new Date(curDate);
      }
      
      curDate.setDate(curDate.getDate() + 1);
    }

    const allDates = [];
    if (firstActiveDate && lastActiveDate) {
      curDate = new Date(firstActiveDate);
      while (curDate <= lastActiveDate) {
        allDates.push(new Date(curDate));
        curDate.setDate(curDate.getDate() + 1);
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –° TIKTOK –î–ê–ù–ù–´–ú–ò
    function processSegment(segmentName, resultMapBySegment, fbDataMapBySegment, segmentType) {
      let segmentMinDate = null, segmentMaxDate = null;
      
      let checkDate = new Date(minDate);
      while (checkDate <= maxDate) {
        const dateKey = Utilities.formatDate(checkDate, 'Europe/Kiev', 'yyyy-MM-dd');
        const rec = resultMapBySegment[segmentName] ? resultMapBySegment[segmentName][dateKey] || { leads: 0, spend: 0 } : { leads: 0, spend: 0 };
        
        if (rec.spend > 0) {
          if (!segmentMinDate) segmentMinDate = new Date(checkDate);
          segmentMaxDate = new Date(checkDate);
        }
        
        checkDate.setDate(checkDate.getDate() + 1);
      }

      if (!segmentMinDate || !segmentMaxDate) return null;

      const segmentDates = [];
      let curDateSeg = new Date(segmentMinDate);
      while (curDateSeg <= segmentMaxDate) {
        segmentDates.push(new Date(curDateSeg));
        curDateSeg.setDate(curDateSeg.getDate() + 1);
      }

      const segmentData = {
        dates: [],
        ratings: [],
        cplDay: [],
        leadsDay: [],
        spendDay: [],
        conversionDay: [],
        maxCPL: [],
        cplCumulative: [],
        cplCumulativeColors: [],
        cplCumulativeArrows: [],
        freq: [],
        ctr: [],
        cpm: [],
        linkClicks: [],
        cpc: [],
        avgWatchTime: [],
        videoName: [],
        siteUrl: [],
        budget: []
      };

      let activeDaysSegment = 0, daysInNormSegment = 0, daysBelowAllowedSegment = 0;
      let segmentLeads = 0, segmentClicks = 0;
      const segmentVideos = new Set(), segmentSites = new Set();
      let aggCostSegment = 0, aggLeadsSegment = 0, prevDayGoodSegment = null;

      for (let i = 0; i < segmentDates.length; i++) {
        const d = segmentDates[i];
        const dateKey = Utilities.formatDate(d, 'Europe/Kiev', 'yyyy-MM-dd');
        const dateDisplay = Utilities.formatDate(d, 'Europe/Kiev', 'dd.MM.yyyy');
        
        segmentData.dates.push(dateDisplay);
        
        const rec = resultMapBySegment[segmentName] ? resultMapBySegment[segmentName][dateKey] || { leads: 0, spend: 0 } : { leads: 0, spend: 0 };
        const dayLeads = rec.leads;
        const daySpend = rec.spend;
        const dayCpl = (dayLeads > 0) ? (daySpend / dayLeads) : 0;

        const fbDataSegment = (dayLeads > 0 || daySpend > 0) ? (fbDataMapBySegment[segmentName] && fbDataMapBySegment[segmentName][dateKey] || {
          freq: [], ctr: [], cpm: [], linkClicks: [],
          cpc: [], avgWatchTime: [], videoName: [], siteUrl: [], budget: []
        }) : {
          freq: [], ctr: [], cpm: [], linkClicks: [],
          cpc: [], avgWatchTime: [], videoName: [], siteUrl: [], budget: []
        };

        if (dayLeads === 0 && daySpend === 0) {
          segmentData.cplDay.push(0);
          segmentData.leadsDay.push(0);
          segmentData.spendDay.push(0);
          segmentData.conversionDay.push('0.00%');
          segmentData.maxCPL.push(displayMaxCPL);
          segmentData.ratings.push('');
          
          segmentData.freq.push('');
          segmentData.ctr.push('');
          segmentData.cpm.push('');
          segmentData.linkClicks.push('');
          segmentData.cpc.push('');
          segmentData.avgWatchTime.push('');
          segmentData.videoName.push('');
          segmentData.siteUrl.push('');
          segmentData.budget.push('');
          
          aggCostSegment = 0;
          aggLeadsSegment = 0;
          segmentData.cplCumulative.push(0);
          segmentData.cplCumulativeColors.push('gray');
          segmentData.cplCumulativeArrows.push('');
          prevDayGoodSegment = null;
          continue;
        }

        let segmentDayConversion = 0;
        if (fbDataSegment.linkClicks && dayLeads > 0) {
          const segmentDayClicks = sumMultilineValues(fbDataSegment.linkClicks);
          if (segmentDayClicks > 0) {
            segmentDayConversion = (dayLeads / segmentDayClicks) * 100;
          }
        }

        segmentData.cplDay.push(dayCpl);
        segmentData.leadsDay.push(dayLeads);
        segmentData.spendDay.push(daySpend);
        segmentData.conversionDay.push(segmentDayConversion.toFixed(2) + '%');
        segmentData.maxCPL.push(displayMaxCPL);
        
        if (dayLeads > 0 || daySpend > 0) activeDaysSegment++;

        segmentData.freq.push(processDayValues(fbDataSegment.freq, 17));
        segmentData.ctr.push(processDayValues(fbDataSegment.ctr, 18));
        segmentData.cpm.push(processDayValues(fbDataSegment.cpm, 19));
        segmentData.linkClicks.push(processDayValues(fbDataSegment.linkClicks, 20));
        segmentData.cpc.push(processDayValues(fbDataSegment.cpc, 21));
        segmentData.avgWatchTime.push(processDayValues(fbDataSegment.avgWatchTime, 22));
        segmentData.videoName.push(processDayValues(fbDataSegment.videoName, 23));
        segmentData.siteUrl.push(processDayValues(fbDataSegment.siteUrl, 24));
        segmentData.budget.push(processDayValues(fbDataSegment.budget, 25));

        if (dayLeads > 0) {
          if (dayCpl <= displayMaxCPL) daysInNormSegment++;
          else daysBelowAllowedSegment++;
        }

        fbDataSegment.videoName?.forEach(video => {
          if (video && video.trim() !== '') {
            segmentVideos.add(video.trim());
          }
        });
        fbDataSegment.siteUrl?.forEach(site => {
          if (site && site.trim() !== '') {
            segmentSites.add(site.trim());
          }
        });

        segmentLeads += dayLeads;
        segmentClicks += sumMultilineValues(fbDataSegment.linkClicks || []);

        let rating;
        if (dayLeads === 0 && daySpend > 0) {
          rating = "D";
        } else {
          rating = calculateRating(dayCpl, maxCPLThreshold);
        }
        segmentData.ratings.push(rating);

        const dayIsGood = (dayLeads > 0 && dayCpl <= displayMaxCPL);
        
        let arrow = '';
        if (prevDayGoodSegment !== null && prevDayGoodSegment !== dayIsGood) {
          if (dayIsGood) {
            arrow = '‚Üó';
          } else {
            arrow = '‚Üò';
          }
        }

        if (prevDayGoodSegment !== null && prevDayGoodSegment !== dayIsGood) {
          aggCostSegment = daySpend;
          aggLeadsSegment = dayLeads;
        } else {
          aggCostSegment += daySpend;
          aggLeadsSegment += dayLeads;
        }

        const finalCpl = (aggLeadsSegment > 0) ? (aggCostSegment / aggLeadsSegment) : 0;
        segmentData.cplCumulative.push(finalCpl);
        
        segmentData.cplCumulativeColors.push(dayIsGood ? 'green' : 'red');
        segmentData.cplCumulativeArrows.push(arrow);
        
        prevDayGoodSegment = dayIsGood;
      }

      const segmentCR = (segmentClicks > 0) ? (segmentLeads / segmentClicks) * 100 : 0;
      
      return {
        data: segmentData,
        metrics: {
          activeDays: activeDaysSegment,
          daysInNorm: daysInNormSegment,
          daysBelowAllowed: daysBelowAllowedSegment,
          cr: segmentCR.toFixed(2).replace('.', ',') + '%',
          videos: segmentVideos.size,
          sites: segmentSites.size
        }
      };
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('Building general data...');
    const generalData = {
      dates: [],
      ratings: [],
      cplDay: [],
      leadsDay: [],
      spendDay: [],
      conversionDay: [],
      maxCPL: [],
      cplCumulative: [],
      cplCumulativeColors: [],
      cplCumulativeArrows: [],
      groups: [],
      buyers: [],
      accounts: [],
      freq: [],
      ctr: [],
      cpm: [],
      linkClicks: [],
      cpc: [],
      avgWatchTime: [],
      videoName: [],
      siteUrl: [],
      budget: []
    };

    let activeDays = 0, daysInNorm = 0, daysBelowAllowed = 0;
    let aggCost = 0, aggLeads = 0, prevDayGood = null;

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    for (let i = 0; i < allDates.length; i++) {
      const d = allDates[i];
      const dateKey = Utilities.formatDate(d, 'Europe/Kiev', 'yyyy-MM-dd');
      const dateDisplay = Utilities.formatDate(d, 'Europe/Kiev', 'dd.MM.yyyy');
      
      generalData.dates.push(dateDisplay);
      
      const rec = resultMap[dateKey] || { leads: 0, spend: 0 };
      const dayLeads = rec.leads;
      const daySpend = rec.spend;

      if (dayLeads === 0 && daySpend === 0) {
        generalData.cplDay.push(0);
        generalData.leadsDay.push(0);
        generalData.spendDay.push(0);
        generalData.conversionDay.push('0.00%');
        generalData.maxCPL.push(displayMaxCPL);
        generalData.groups.push('');
        generalData.buyers.push('');
        generalData.accounts.push('');
        generalData.ratings.push('');
        
        generalData.freq.push('');
        generalData.ctr.push('');
        generalData.cpm.push('');
        generalData.linkClicks.push('');
        generalData.cpc.push('');
        generalData.avgWatchTime.push('');
        generalData.videoName.push('');
        generalData.siteUrl.push('');
        generalData.budget.push('');
        
        aggCost = 0;
        aggLeads = 0;
        generalData.cplCumulative.push(0);
        generalData.cplCumulativeColors.push('gray');
        generalData.cplCumulativeArrows.push('');
        prevDayGood = null;
        continue;
      }

      const dayCpl = (dayLeads > 0) ? (daySpend / dayLeads) : 0;
      
      let dayConversion = 0;
      if (fbDataMap[dateKey] && fbDataMap[dateKey].linkClicks && dayLeads > 0) {
        const dayClicks = sumMultilineValues(fbDataMap[dateKey].linkClicks);
        if (dayClicks > 0) {
          dayConversion = (dayLeads / dayClicks) * 100;
        }
      }
      
      generalData.cplDay.push(dayCpl);
      generalData.leadsDay.push(dayLeads);
      generalData.spendDay.push(daySpend);
      generalData.conversionDay.push(dayConversion.toFixed(2) + '%');
      generalData.maxCPL.push(displayMaxCPL);

      // –ì—Ä—É–ø–ø—ã
      const dayGroups = groupsByDate[dateKey] || [];
      const uniqueGroups = Array.from(new Set(dayGroups.filter(g => g !== undefined && g !== null && g !== ''))).reverse();
      generalData.groups.push(uniqueGroups.join('\n'));

      // –ë–∞–π–µ—Ä—ã
      const dayBuyers = buyersByDate[dateKey] || [];
      const uniqueBuyers = Array.from(new Set(dayBuyers.filter(b => b !== undefined && b !== null && b !== ''))).reverse();
      generalData.buyers.push(uniqueBuyers.join('\n'));

      // –ê–∫–∫–∞—É–Ω—Ç—ã
      const dayAccounts = accountsByDate[dateKey] || [];
      const uniqueAccounts = Array.from(new Set(dayAccounts.filter(a => a !== undefined && a !== null && a !== ''))).reverse();
      generalData.accounts.push(uniqueAccounts.join('\n'));

      activeDays++;
      if (dayLeads > 0) {
        if (dayCpl <= displayMaxCPL) daysInNorm++;
        else daysBelowAllowed++;
      } else daysBelowAllowed++;

      generalData.freq.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].freq : [], 17));
      generalData.ctr.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].ctr : [], 18));
      generalData.cpm.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].cpm : [], 19));
      generalData.linkClicks.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].linkClicks : [], 20));
      generalData.cpc.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].cpc : [], 21));
      generalData.avgWatchTime.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].avgWatchTime : [], 22));
      generalData.videoName.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].videoName : [], 23));
      generalData.siteUrl.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].siteUrl : [], 24));
      generalData.budget.push(processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].budget : [], 25));

      let rating;
      if (dayLeads === 0 && daySpend > 0) {
        rating = "D";
      } else {
        rating = calculateRating(dayCpl, maxCPLThreshold);
      }
      generalData.ratings.push(rating);

      const dayIsGood = (dayLeads > 0 && dayCpl <= displayMaxCPL);
      
      let arrow = '';
      if (prevDayGood !== null && prevDayGood !== dayIsGood) {
        if (dayIsGood) {
          arrow = '‚Üó';
        } else {
          arrow = '‚Üò';
        }
      }

      if (prevDayGood !== null && prevDayGood !== dayIsGood) {
        aggCost = daySpend;
        aggLeads = dayLeads;
      } else {
        aggCost += daySpend;
        aggLeads += dayLeads;
      }

      const finalCpl = (aggLeads > 0) ? (aggCost / aggLeads) : 0;
      generalData.cplCumulative.push(finalCpl);
      
      generalData.cplCumulativeColors.push(dayIsGood ? 'green' : 'red');
      generalData.cplCumulativeArrows.push(arrow);
      
      prevDayGood = dayIsGood;
    }

    // –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ë–∞–π–µ—Ä -> –ì—Ä—É–ø–ø–∞
    console.log('Processing buyer-group hierarchy data...');
    const buyerGroupsData = {};
    
    // –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    Array.from(globalBuyers).forEach(buyerName => {
      buyerGroupsData[buyerName] = {
        buyerData: processSegment(buyerName, resultMapByBuyer, fbDataMapByBuyer, 'buyer'),
        groups: {}
      };
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –≥—Ä—É–ø–ø—ã
      if (buyerGroupsMap[buyerName]) {
        Array.from(buyerGroupsMap[buyerName]).forEach(groupId => {
          const groupName = groupIdToNameMap[groupId];
          if (groupName) {
            const buyerGroupKey = `${buyerName}:::${groupId}`;
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∞–π–µ—Ä-–≥—Ä—É–ø–ø–∞
            const buyerGroupData = processSegment(buyerGroupKey, resultMapByBuyerGroup, fbDataMapByBuyerGroup, 'buyer-group');
            if (buyerGroupData) {
              buyerGroupsData[buyerName].groups[groupName] = buyerGroupData;
            }
          }
        });
      }
    });

    console.log('Buyer-group hierarchy created with TikTok metrics:', Object.keys(buyerGroupsData).length, 'buyers');

    // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    const crValue = (totalClicksAll > 0) ? (totalLeadsAll / totalClicksAll) * 100 : 0;
    const crStr = crValue.toFixed(2).replace('.', ',') + '%';

    console.log('Analysis completed successfully with enhanced TikTok metrics!');
    console.log('Total unique videos found:', globalVideos.size);

    return {
      article: article,
      generalData: generalData,
      buyerGroupsData: buyerGroupsData, // –î–ï–†–ï–í–û–í–ò–î–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –° TIKTOK –ú–ï–¢–†–ò–ö–ê–ú–ò
      generalMetrics: {
        activeDays: activeDays,
        daysInNorm: daysInNorm,
        daysBelowAllowed: daysBelowAllowed,
        totalGroups: globalGroups.size,
        totalBuyers: globalBuyers.size,
        totalAccounts: globalAccounts.size,
        cr: crStr,
        videos: globalVideos.size,
        sites: globalSites.size,
        displayMaxCPL: displayMaxCPL.toFixed(2),
        displayCPL_ROI_minus5: displayCPL_ROI_minus5.toFixed(2),
        groupNames: Array.from(globalGroups).join('\n'),
        buyerNames: Array.from(globalBuyers).join('\n'),
        accountNames: Array.from(globalAccounts).join('\n'),
        videoNames: Array.from(globalVideos).join('\n'),
        siteUrls: Array.from(globalSites).join('\n'),
        status: status,
        season: season,
        category: category,
        stock: stock,
        stockDays: stockDays,
        efficiencyZone: efficiencyZoneFormatted,
        zoneAB: zoneABFormatted,
        zoneAC: zoneACFormatted,
        zoneAD: zoneADFormatted,
        zoneAE: zoneAEFormatted
      }
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ buildChartForArticle:', error);
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –Ω–∞—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (error.message.includes('üìä') || error.message.includes('üîå') || error.message.includes('üö®') || error.message.includes('üîß')) {
      throw error;
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    throw new Error(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n${error.message}\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`);
  }
}
